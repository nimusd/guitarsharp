using MathNet.Numerics.IntegralTransforms;
using System.Numerics;
using NAudio.Wave;
using NAudio.Extras;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Diagnostics;
using NAudio.Dsp;
using NWaves.Signals;
using NWaves.Audio;
using NWaves.Filters;
using NWaves.Filters.Base;
using NWaves.Filters.BiQuad;
using NWaves.Filters.Fda;
using NWaves.Operations;
using NWaves.Transforms;
using NWaves.Utils;
using HighPassFilter = NWaves.Filters.BiQuad.HighPassFilter;
using LowPassFilter = NWaves.Filters.BiQuad.LowPassFilter;


namespace Guitarsharp
{

    [Serializable]
    public class KarplusStrong : ISampleProvider
    {
        private readonly double decay = 0.998;
        public readonly List<float> delayLine;
        private readonly List<float> excitationSample;
        private int pos = 0;
        public float frequency;
        public float lowPassCutOffValue { get; set; } = 1500;
        public float lowPassQValue { get; set; } = 3;

        private float previousSample = 0.0f;
        public int attackPhaseSamples { get; set; } = 480;// lowest value


        private List<float> sampleBuffer = new List<float>();
        private int bufferLength = 1024; // Example size, adjust as needed
        public float dryWetMix =.5f; // Value from 0 (fully dry) to 1 (fully wet)
        public Equalizer twelveBands;
        public NAudio.Wave.WaveFormat WaveFormat { get; set; } = GlobalConfig.GlobalWaveFormat;

        private NWaves.Filters.BiQuad.BiQuadFilter lowPassFilter;


        public KarplusStrong(int sampleRate, float thefrequency)
        {
            NAudio.Wave.WaveFormat format = GlobalConfig.GlobalWaveFormat;
            frequency = thefrequency;
            int delayLineLength = (int)Math.Round(format.SampleRate / frequency);

            delayLine = new List<float>(new float[delayLineLength]);
            excitationSample = new List<float>(new float[delayLineLength]);

            var random = new Random();
            for (int i = 0; i < delayLineLength; i++)
            {
                excitationSample[i] = (float)(random.NextDouble() * 2.0 - 1.0);
            }
            // Initialize the low-pass filter
            lowPassFilter = new  LowPassFilter(0.1f,.1);// cutoff frequency and q factor (resonance which control the bandwidth of the filter)
        }
       

        public void SetDryWetMix(float mix)
        {
            dryWetMix = mix/100;
           
        }
        public void SetlowPassCutOffValue(float sliderValue)
        {
           
            lowPassCutOffValue = (float)  (0.05 + 0.45 * (sliderValue - 1) / 99.0)  ;  //cutoff must be between .05 and 0.5
        }
        public void Stop()
        {
            // Quickly decay the remaining samples in the delay line to zero to stop the sound
            for (int i = 0; i < delayLine.Count; i++)
            {
                delayLine[i] *= 0.1f; // Apply a strong damping factor to each sample
            }

            // Reset envelope position to prevent the sound from starting again
           
        }

        
        public float NextSample()
        {
            /*
            float output;
            int nextPos = (pos + 1) % delayLine.Count;
            double currentDecay = GetDecayFactor(frequency);
            output= delayLine[nextPos] = (float)(currentDecay * 0.5 * (delayLine[nextPos] + delayLine[pos])); 
            pos = nextPos;
            return output;
            */

            //to dampen the sound
            float feedback = 0.989f;//between 0.980 and 0.999 (from mute to too much sustain)
            float output = delayLine[pos];
            delayLine[pos] = feedback * 0.5f * (delayLine[pos] + delayLine[(pos + 1) % delayLine.Count]);
            

            pos = (pos + 1) % delayLine.Count;


            /*

            float output;
            int nextPos = (pos + 1) % delayLine.Count;

            output = delayLine[nextPos] = (float)(0.998f * 0.5 * (delayLine[nextPos] + delayLine[pos]));
            pos = nextPos;
            */

            // Apply the low-pass filter to the output
            /*
            float lowpass = lowPassFilter.Transform(output);
           //output = lowpass;

            BiQuadFilter notchFilter = BiQuadFilter.NotchFilter(48000, 4000, -10);
            
            float notch = notchFilter.Transform(output);
           // output = notch;
            BiQuadFilter lowShelfFilter = BiQuadFilter.LowShelf(48000, 500, 5, 7);
            float lowshelf = lowShelfFilter.Transform(output);
           // output = lowshelf;
            BiQuadFilter peakingFilter = BiQuadFilter.PeakingEQ(4800, 1000, 2, -15);
            float peaking = peakingFilter.Transform(output);
            //output = peaking;
            
            */

            //var newoutput = lowPassFilter.Process(output);
            
            return output;
        }


        public void Pluck(float amplitude)
        {
            /*
             // noise 
            for (int i = 0; i < excitationSample.Count; i++)
            {
                delayLine[i] = amplitude * excitationSample[i];
            }

            */
            //pure sine
            for (int i = 0; i < delayLine.Count; i++)
            {
                delayLine[i] = (amplitude/2) * (float)(Math.Sin(2 * Math.PI * i / delayLine.Count));

            }

            
            // Transition to random numbers
            int transitionPoint = (int)(delayLine.Count * .9f);//from .1 "very" metallic to 1 Harp like 
            Random random = new Random();
            for (int i = transitionPoint; i < delayLine.Count; i++)
            {
                delayLine[i] = (float)random.NextDouble() * .1f - 1f;
            }

           
            /*

            Random random = new Random();
            for (int i = 0; i < delayLine.Count; i++)
            {
                float noise = (float)random.NextDouble() * 2 - 1;
                float noiseAmplitude = (float)random.NextDouble();
                float phase = (float)(random.NextDouble() * 2 * Math.PI);

                delayLine[i] = amplitude * (float)(Math.Sin(2 * Math.PI * i / (delayLine.Count) + noise)  ); ;//the last number is giving the metallic to nylonish quality to the sound
            }
            */
        }

        public void UpdateFrequency(float newFrequency)
        {
            NAudio.Wave.WaveFormat format = GlobalConfig.GlobalWaveFormat;

            frequency = newFrequency;
            int newDelayLineLength = (int)Math.Round(format.SampleRate / frequency);
            
            // Resize the delayLine and excitationSample
            delayLine.Resize(newDelayLineLength);
            excitationSample.Resize(newDelayLineLength);

            // Reset the pos variable
            pos = 0;

            // Update the excitationSample with new random values
            var random = new Random();
            for (int i = 0; i < newDelayLineLength; i++)
            {
                excitationSample[i] = (float)(random.NextDouble() * 2.0 - 1.0);
            }
        }
        public List<float> TransitionToFrequency(float newFrequency, int transitionSamples)
        {
            List<float> transitionedSamples = new List<float>();
            int originalDelayLineLength = delayLine.Count;
            int newDelayLineLength = (int)Math.Round(WaveFormat.SampleRate / newFrequency);
            float delayLineChangePerSample = (newDelayLineLength - originalDelayLineLength) / (float)transitionSamples;

            for (int i = 0; i < transitionSamples; i++)
            {
                // Calculate the new length for this sample
                int currentDelayLineLength = originalDelayLineLength + (int)(i * delayLineChangePerSample);
                delayLine.Resize(currentDelayLineLength);

                // Generate the current sample with the current delay line length
                float currentSample = NextSample();

                // Add the current sample to the transitioned samples list
                transitionedSamples.Add(currentSample);
            }

            // Once the transition is complete, set the delay line to the final length
            delayLine.Resize(newDelayLineLength);
            frequency = newFrequency;

            return transitionedSamples;
        }
        public void UpdateFrequencySmoothly(float newFrequency)
        {
            // Calculate the number of samples over which to spread the frequency transition
            int transitionLength = WaveFormat.SampleRate / 10; // for example, over a tenth of a second

            // Calculate the difference in delay line length
            int oldDelayLineLength = delayLine.Count;
            int newDelayLineLength = (int)Math.Round(WaveFormat.SampleRate / newFrequency);
            int delayLineDifference = newDelayLineLength - oldDelayLineLength;

            // Calculate the amount to adjust the delay line length each sample
            float delayLineAdjustmentPerSample = (float)delayLineDifference / transitionLength;

            // Adjust the delay line length gradually over the transitionLength samples
            for (int i = 0; i < transitionLength; i++)
            {
                // Adjust the delay line length
                int adjustedDelayLineLength = oldDelayLineLength + (int)(i * delayLineAdjustmentPerSample);
                delayLine.Resize(adjustedDelayLineLength);

                // Generate the next sample as normal, which will incorporate the new delay line length
                NextSample();
            }

            // After the transition, set the frequency and delay line length to their final values
            frequency = newFrequency;
            delayLine.Resize(newDelayLineLength);
        }


        private double GetDecayFactor(float frequency)
        {
            return 0.998 - (0.001 * (frequency / 1000.0f));
        }
        

        public int Read(float[] buffer, int offset, int count)
        {
            for (int n = 0; n < count; n += 2)
            {
                float sample = NextSample();
               

                buffer[n + offset] = sample; // Left channel
                buffer[n + offset + 1] = sample; // Right channel
            }
            return count;
        }
    }




    public static class ListExtensions
    {
        public static void Resize<T>(this List<T> list, int newSize)
        {
            int currentSize = list.Count;
            if (newSize < currentSize)
                list.RemoveRange(newSize, currentSize - newSize);
            else if (newSize > currentSize)
                list.AddRange(Enumerable.Repeat(default(T), newSize - currentSize));
        }
    }


}
